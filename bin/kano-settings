#!/usr/bin/env python

# kano-settings
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

import os
import sys
import gettext
from gi.repository import Gtk, GObject
GObject.threads_init()

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

locale_path = os.path.join(dir_path, 'locale') if dir_path != '/usr' else None
gettext.install('kano-settings', locale_path, unicode=1)

import kano_settings.common as common
from kano_settings.home_screen import HomeScreen
from kano.network import is_internet
from kano.gtk3.apply_styles import apply_styling_to_screen, apply_common_to_screen
from kano.gtk3.application_window import ApplicationWindow
from kano.gtk3.kano_combobox import KanoComboBox
from kano.gtk3.scrolled_window import ScrolledWindow
from kano.gtk3.top_bar import TopBar
from kano.gtk3.kano_dialog import KanoDialog

MAX_STATE = 6
init_state = -1


# Window class
class MainWindow(ApplicationWindow):
    state = 0
    last_level_visited = 0
    width = 680
    height = 405
    CSS_PATH = common.media + '/CSS/style.css'

    def __init__(self, screen_number=None):
        # Check for internet, if screen is 12 means no internet
        if screen_number == 12:
            common.has_internet = False
        else:
            common.has_internet = is_internet()

        # Set combobox styling to the screen
        # Is done here so we don't attach the styling multiple times when switching screens
        apply_styling_to_screen(self.CSS_PATH)
        apply_common_to_screen()
        KanoComboBox.apply_styling_to_screen()
        ScrolledWindow.apply_styling_to_screen(wide=True)
        # Set window
        ApplicationWindow.__init__(self, _("Settings"), self.width, self.height)
        self.set_decorated(True)
        self.top_bar = TopBar(_("Settings"))
        self.top_bar.set_close_callback(self.close_window)
        self.prev_handler = None
        self.set_titlebar(self.top_bar)
        self.set_icon_name("kano-settings")
        self.connect("delete-event", Gtk.main_quit)
        # In case we are called from kano-world-launcher, terminate splash
        os.system('kano-stop-splash') 
        # Init to Home Screen
        HomeScreen(self, screen_number)

    def clear_win(self):
        self.remove_main_widget()

    def go_to_home(self, widget=None, event=None):
        self.clear_win()
        HomeScreen(self)

    def change_prev_callback(self, callback):
        # first time, no event attached
        self.remove_prev_callback()
        self.prev_handler = self.top_bar.prev_button.connect("button-release-event", callback)

    def remove_prev_callback(self):
        if self.prev_handler:
            self.top_bar.prev_button.disconnect(self.prev_handler)
            self.prev_handler = None

    # On closing window, will alert if any of the listed booleans are True
    def close_window(self, button=None, event=None):
        if common.need_reboot:
            kdialog = KanoDialog(
                _("Reboot?"),
                _("Your Kano needs to reboot for changes to apply"),
                [
                    {
                        'label': _("Later").upper(),
                        'color': 'grey',
                        'return_value': False
                    },
                    {
                        'label': _("Reboot now").upper(),
                        'color': 'orange',
                        'return_value': True
                    }
                ],
                parent_window=self.get_toplevel()
            )

            kdialog.set_action_background("grey")
            do_reboot_now = kdialog.run()
            if do_reboot_now:
                os.system("sudo reboot")

        Gtk.main_quit()


def main(screen_number=None):

    # Create windown
    MainWindow(screen_number)

    # start the GTK+ processing loop
    Gtk.main()


if __name__ == "__main__":

    if os.environ['LOGNAME'] != 'root':
        exit("Error: Settings must be executed with root privileges")

    if(len(sys.argv) > 1):
        try:
            init_state = int(sys.argv[1])
            main(init_state)
        except:
            exit("Error: incorrect argument")

    else:
        main()
